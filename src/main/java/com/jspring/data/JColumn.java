package com.jspring.data;

import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.persistence.Column;

import org.springframework.core.annotation.AliasFor;

@Target({ METHOD, FIELD })
@Retention(RUNTIME)
public @interface JColumn {
	//////////////////
	/// Column
	//////////////////
	/**
	 * (Optional) The name of the column. Defaults to the property or field
	 * name.
	 */
	@AliasFor(annotation = Column.class, attribute = "name")
	String name() default "";

	/**
	 * (Optional) Whether the property is a unique key. This is a shortcut for
	 * the UniqueConstraint annotation at the table level and is useful for when
	 * the unique key constraint is only a single field. This constraint applies
	 * in addition to any constraint entailed by primary key mapping and to
	 * constraints specified at the table level.
	 */
	@AliasFor(annotation = Column.class, attribute = "unique")
	boolean unique() default false;

	/**
	 * (Optional) Whether the database column is nullable.
	 */
	@AliasFor(annotation = Column.class, attribute = "nullable")
	boolean nullable() default true;

	/**
	 * (Optional) Whether the column is included in SQL INSERT statements
	 * generated by the persistence provider.
	 */
	@AliasFor(annotation = Column.class, attribute = "insertable")
	boolean insertable() default true;

	/**
	 * (Optional) Whether the column is included in SQL UPDATE statements
	 * generated by the persistence provider.
	 */
	@AliasFor(annotation = Column.class, attribute = "updatable")
	boolean updatable() default true;

	// /**
	// * (Optional) The SQL fragment that is used when generating the DDL for
	// the
	// * column.
	// * <p>
	// * Defaults to the generated SQL to create a column of the inferred type.
	// */
	// @AliasFor(annotation = Column.class, attribute = "columnDefinition")
	// String columnDefinition() default "";

	/**
	 * (Optional) The name of the table that contains the column. If absent the
	 * column is assumed to be in the primary table.
	 */
	@AliasFor(annotation = Column.class, attribute = "table")
	String table() default "";

	/**
	 * (Optional) The column length. (Applies only if a string-valued column is
	 * used.)
	 */
	@AliasFor(annotation = Column.class, attribute = "length")
	int length() default 255;

	/**
	 * (Optional) The precision for a decimal (exact numeric) column. (Applies
	 * only if a decimal column is used.) Value must be set by developer if used
	 * when generating the DDL for the column.
	 */
	@AliasFor(annotation = Column.class, attribute = "precision")
	int precision() default 0;

	/**
	 * (Optional) The scale for a decimal (exact numeric) column. (Applies only
	 * if a decimal column is used.)
	 */
	@AliasFor(annotation = Column.class, attribute = "scale")
	int scale() default 0;

	//////////////////
	/// MORE
	//////////////////

	String indexName() default "";

	/**
	 * 
	 * @return
	 */
	String options() default "";

	String joinOptions() default "";

	String joinColumn() default "";
	//
	String defaultValue() default "";

	String expression() default "";

	String header() default "";

	String title() default "";

	String width() default "";

	String height() default "";

	// 过滤
	boolean filterable() default true;

	// 列表
	boolean findAllable() default true;

	boolean sortable() default false;

	// 详情
	boolean findOnable() default true;

	// 更新
	boolean hidden() default false;
}
